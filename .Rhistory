dif<-c() # initialize a vector for storage
for (i in 1:10000){
dif[i]<-mean(rnorm(n=100, mean=20, sd=5))-mean(rnorm(n=100, mean=15, sd=5))
}
hist(dif, breaks=40)
sd(dif)
sqrt((25/100)+(25/100))
mean(dif)
20-15
t.test(Spend~Treatment, data=df)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub<-df %>% filter(Treatment=="B")
t.test(sub$Spend)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
df<-read.csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv", stringsAsFactors = TRUE)
head(df)
library(tidyverse)
df %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
boxplot(Spend~Treatment, data=df)
set.seed(13)
dif<-c() # initialize a vector for storage
for (i in 1:10000){
dif[i]<-mean(rnorm(n=100, mean=20, sd=5))-mean(rnorm(n=100, mean=15, sd=5))
}
hist(dif, breaks=40)
sd(dif)
sqrt((25/100)+(25/100))
mean(dif)
20-15
t.test(Spend~Treatment, data=df)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub<-df %>% filter(Treatment=="B")
t.test(sub$Spend)
library(tidyverse)
sub<-df %>% filter(Spend>0)
library(tidyverse)
df %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
t.test(Spend~Treatment, data=df)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub<-df %>% filter(Treatment=="B")
t.test(sub$Spend)
library(tidyverse)
sub<-df %>% filter(Spend>0)
library(tidyverse)
sub %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
t.test(Spend~Treatment, data=sub)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub<-df %>% filter(Treatment=="B")
t.test(sub$Spend)
sub2<-sub %>% filter(Treatment=="B")
t.test(sub2$Spend)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
df<-read.csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv", stringsAsFactors = TRUE)
head(df)
library(tidyverse)
df %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
boxplot(Spend~Treatment, data=df)
set.seed(13)
dif<-c() # initialize a vector for storage
for (i in 1:10000){
dif[i]<-mean(rnorm(n=100, mean=20, sd=5))-mean(rnorm(n=100, mean=15, sd=5))
}
hist(dif, breaks=40)
sd(dif)
sqrt((25/100)+(25/100))
mean(dif)
20-15
t.test(Spend~Treatment, data=df)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub<-df %>% filter(Treatment=="B")
t.test(sub$Spend)
library(tidyverse)
sub<-df %>% filter(Spend>0)
library(tidyverse)
sub %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
t.test(Spend~Treatment, data=sub)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub2<-sub %>% filter(Treatment=="B")
t.test(sub2$Spend)
boxplot(Spend~Treatment, data=sub)
boxplot(Spend~Treatment, data=sub)
sub<-sub %>% filter(Treatment=="B")
t.test(sub$Spend)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
df<-read.csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv", stringsAsFactors = TRUE)
head(df)
library(tidyverse)
df %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
boxplot(Spend~Treatment, data=df)
set.seed(13)
dif<-c() # initialize a vector for storage
for (i in 1:10000){
dif[i]<-mean(rnorm(n=100, mean=20, sd=5))-mean(rnorm(n=100, mean=15, sd=5))
}
hist(dif, breaks=40)
sd(dif)
sqrt((25/100)+(25/100))
mean(dif)
20-15
t.test(Spend~Treatment, data=df)
samples<-list()
means<-c()
for (i in 1:100){
samples[[i]]<-rnorm(20, 3, 0.5)
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.99)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 3, color="red")+ylim(2.4, 3.6)+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
sub<-df %>% filter(Treatment=="B")
t.test(sub$Spend)
library(tidyverse)
sub<-df %>% filter(Spend>0)
library(tidyverse)
sub %>% group_by(Treatment) %>% summarise(mean=mean(Spend), sd=sd(Spend), n=n())
boxplot(Spend~Treatment, data=sub)
t.test(Spend~Treatment, data=sub)
sub<-sub %>% filter(Treatment=="B")
t.test(sub$Spend)
samples<-list()
means<-c()
set.seed(13)
for (i in 1:100){
samples[[i]]<-rbeta(20,1,0.4) #generating skewed data
means[i]<-mean(samples[[i]])
}
p<-lapply(samples, t.test, conf.level=0.95)
lower<-c()
upper<-c()
for (i in 1:100){
lower[i]<-p[[i]]$conf.int[1]
upper[i]<-p[[i]]$conf.int[2]
}
df1<-data.frame(lower, upper, means)
df1$x<-seq(1:100)
library(ggplot2)
ggplot(df1, aes(x=x, y=means))+geom_point()+geom_errorbar(aes(ymax=upper, ymin=lower))+geom_hline(yintercept = 1/(1+0.4), color="red")+
theme_bw()+ylab("Confidence Interval")+xlab("Sample Number")
set.seed(13)
# Sample data for two groups
groupA <- c(10, 12, 15, 14, 11)
groupB <- c(15, 17, 13, 20, 14)
# Observed test statistic
observed_statistic <- mean(groupA) - mean(groupB)
# Number of random permutations
num_permutations <- 10000
# Initialize an empty vector to store permutation test statistics
permutation_stats <- numeric(num_permutations)
# Perform random permutations and calculate test statistics
for (i in 1:num_permutations) {
# Combine the data and shuffle the order
combined_data <- c(groupA, groupB)
shuffled_data <- sample(combined_data, replace = FALSE)
# Calculate the test statistic for this permutation
perm_statistic <- mean(shuffled_data[1:length(groupA)]) - mean(shuffled_data[(length(groupA) + 1):(length(groupA) + length(groupB))])
# Store the permutation test statistic
permutation_stats[i] <- perm_statistic
}
# Calculate the p-value
p_value <- mean(abs(permutation_stats) >= abs(observed_statistic))
# Display the p-value
cat("P-value:", p_value, "\n")
hist(permutation_stats, breaks=25)
abline(v=observed_statistic, col="red")
abline(v=-observed_statistic, col="red")
# Sample data for two groups
groupA <- df$Spend[df$Treatment=="A"]
groupB <- df$Spend[df$Treatment=="B"]
# Observed test statistic
observed_statistic <- mean(groupA) - mean(groupB)
# Number of random permutations
num_permutations <- 10000
# Initialize an empty vector to store permutation test statistics
permutation_stats <- numeric(num_permutations)
# Perform random permutations and calculate test statistics
for (i in 1:num_permutations) {
# Combine the data and shuffle the order
combined_data <- c(groupA, groupB)
shuffled_data <- sample(combined_data, replace = FALSE)
# Calculate the test statistic for this permutation
perm_statistic <- mean(shuffled_data[1:length(groupA)]) - mean(shuffled_data[(length(groupA) + 1):(length(groupA) + length(groupB))])
# Store the permutation test statistic
permutation_stats[i] <- perm_statistic
}
# Calculate the p-value
p_value <- mean(abs(permutation_stats) >= abs(observed_statistic))
# Display the p-value
cat("P-value:", p_value, "\n")
library(reticulate)
reticulate::repl_python()
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv")
print(df.head())
summary_df = df.groupby('Treatment').agg({'Spend': ['mean', 'std', 'count']}).reset_index()
summary_df.columns = ['Treatment', 'mean', 'sd', 'n']
print(summary_df)
df = pd.read_csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv")
import pandas as pd
quit
install.packages("pandas")
reticulate::repl_python()
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv")
print(df.head())
summary_df = df.groupby('Treatment').agg({'Spend': ['mean', 'std', 'count']}).reset_index()
summary_df.columns = ['Treatment', 'mean', 'sd', 'n']
print(summary_df)
import pandas as pd
quit
library(reticulate)
reticulate::repl_python()
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv")
print(df.head())
summary_df = df.groupby('Treatment').agg({'Spend': ['mean', 'std', 'count']}).reset_index()
summary_df.columns = ['Treatment', 'mean', 'sd', 'n']
print(summary_df)
import pandas as pd
from plotnine import ggplot, aes, geom_text, xlab, ylab, theme_bw, theme, geom_boxplot, element_text
# Creating the plot
plot = (ggplot(df, aes(x='Treatment', y='Spend')) +
geom_boxplot()+
theme_bw() +
theme(axis_title=element_text(size=18)))
# Displaying the plot
print(plot)
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/losiewbw/ISA633/main/ab_revenue.csv")
print(df.head())
summary_df = df.groupby('Treatment').agg({'Spend': ['mean', 'std', 'count']}).reset_index()
summary_df.columns = ['Treatment', 'mean', 'sd', 'n']
print(summary_df)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
set.seed(13)
samples=100
n=1000
p=0.2
sim<-rbinom(samples, n, p)
sim<-(sim/n)
hist(sim, breaks=20)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
set.seed(13)
samples=100
n=1000
p=0.2
sim<-rbinom(samples, n, p)
sim<-(sim/n)
hist(sim, breaks=20)
set.seed(13)
samples=100
n=1000
p=0.02
sim<-rbinom(samples, n, p)
sim<-(sim/n)
hist(sim)
set.seed(13)
samples=100
n=1000
p=0.002
sim<-rbinom(samples, n, p)
sim<-(sim/n)
hist(sim)
set.seed(13)
samples=100
n=1000
p=0.2
sim<-rbinom(samples, n, p)
sim<-(sim/n)
hist(sim, breaks=20)
sqrt((p*(1-p))/n)
sd(sim)
z<-qnorm(0.975)
n=50
p<-seq(0.001,0.91,0.01)
iter=10000
coverage<-c()
for (i in 1:length(p)){
sample<-rbinom(iter,n,p[i])
phat<-sample/n
lower=phat-z*sqrt(phat*(1-phat)/n)
upper=phat+z*sqrt(phat*(1-phat)/n)
count<-ifelse(lower<p[i] & p[i]<upper, 1, 0)
coverage[i]<-sum(count)/iter
}
plot(p, coverage, ylim=c(0.7,1))
abline(h=0.95, col="red")
x<-seq(0,1,0.01)
a=2
b=2
fx<-dbeta(x, a, b)
plot(x, fx, type="b")
a=3+1
b=197+1
qbeta(0.975, a, b)
qbeta(0.025, a, b)
a=3+1
b=197+1
qbeta(0.975, a, b)
qbeta(0.025, a, b)
a=6+1
b=(375-6)+1
qbeta(0.975, a, b)
qbeta(0.025, a, b)
prop.test(x=6, n=375)
knitr::opts_chunk$set(echo = TRUE,
cache = TRUE,
warning = FALSE,
message = FALSE)
set.seed(13)
samples=100
n=1000
p=0.2
sim<-rbinom(samples, n, p)
sim<-(sim/n)
hist(sim, breaks=20)
sqrt((p*(1-p))/n)
sd(sim)
z<-qnorm(0.975)
n=50
p<-seq(0.001,0.91,0.01)
iter=10000
coverage<-c()
for (i in 1:length(p)){
sample<-rbinom(iter,n,p[i])
phat<-sample/n
lower=phat-z*sqrt(phat*(1-phat)/n)
upper=phat+z*sqrt(phat*(1-phat)/n)
count<-ifelse(lower<p[i] & p[i]<upper, 1, 0)
coverage[i]<-sum(count)/iter
}
plot(p, coverage, ylim=c(0.7,1))
abline(h=0.95, col="red")
x<-seq(0,1,0.01)
a=2
b=2
fx<-dbeta(x, a, b)
plot(x, fx, type="b")
a=3+1
b=197+1
qbeta(0.975, a, b)
qbeta(0.025, a, b)
a=6+1
b=(375-6)+1
qbeta(0.975, a, b)
qbeta(0.025, a, b)
prop.test(x=6, n=375)
iter=100000
a=23+1
b=177+1
a1=28+1
b1=172+1
count<-c()
for (i in 1:iter){
A<-rbeta(1, a, b)
B<-rbeta(1, a1, b1)
count[i]<-ifelse(A>B, 1, 0)
}
pdiff<-sum(count)/iter
pdiff
iter=100000
a=23+1
b=177+1
a1=28+1
b1=172+1
count<-c()
for (i in 1:iter){
A<-rbeta(1, a, b)
B<-rbeta(1, a1, b1)
count[i]<-ifelse(A>B, 1, 0)
}
pdiff<-sum(count)/iter
pdiff
prop.test(x<-c(23,38), n<-c(200,200))
iter=100000
a=23+1
b=177+1
a1=28+1
b1=172+1
count<-c()
for (i in 1:iter){
A<-rbeta(1, a, b)
B<-rbeta(1, a1, b1)
count[i]<-ifelse(A>B, 1, 0)
}
pdiff<-sum(count)/iter
pdiff
